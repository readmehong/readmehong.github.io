<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>http://192.168.0.20:1313/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 05 Sep 2018 15:13:56 +0900</lastBuildDate>
    <atom:link href="http://192.168.0.20:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>test1</title>
      <link>http://192.168.0.20:1313/post/test1/</link>
      <pubDate>Wed, 05 Sep 2018 15:13:56 +0900</pubDate>
      
      <guid>http://192.168.0.20:1313/post/test1/</guid>
      <description>&lt;p&gt;다시 생성해본 테스트 파일&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>test</title>
      <link>http://192.168.0.20:1313/post/test/</link>
      <pubDate>Wed, 05 Sep 2018 10:35:50 +0900</pubDate>
      
      <guid>http://192.168.0.20:1313/post/test/</guid>
      <description>&lt;p&gt;test hugo server&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>branch comment</title>
      <link>http://192.168.0.20:1313/post/branch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://192.168.0.20:1313/post/branch/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;create branch

&lt;ul&gt;
&lt;li&gt;git branch test&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;switch branch&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git checkout test&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;수정한 브런치의 파일은 add 및 commit 를 하면 해당 브런치에 커미이 된다. (로컬에)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ndash;&amp;gt; git add *  / git commit -m &amp;ldquo;test&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;git branch 삭제 하는 방법(로컬에서)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git branch -d test&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;git branch 를 git 서버에 push 하는 방법.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git push origin test
해당 브런치가 git 서버에 나타나게 된다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;git 서버 상 branch 삭제 방법&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git push origin &amp;ndash;delete test&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;branch 의 머지 상태 확인.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git branch &amp;ndash;merged

&lt;ul&gt;
&lt;li&gt;&amp;ndash;&amp;gt; * 기호가 없는 브런치는 삭제해도 되는 브런치&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;git branch &amp;ndash;no-merged

&lt;ul&gt;
&lt;li&gt;&amp;ndash;&amp;gt; 목록에 보이는 브런치는 merge를 해야한다.(merge는 하지 않고 커밋은 담고 있는 브런치)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;branch 강제 삭제&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git branch -D test&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rebase Merge 차이&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rebase 의 경우는 브랜치의 변경사항을 순서대로 다른 브랜치에 적용하면서 합치고. Mergew의 경우는 두 브랜치의 최종결과만을 가지고 합친다.&lt;/li&gt;
&lt;li&gt;&amp;ndash;&amp;gt; 두가지 모두 최종 결과물은 동일 하지만, Rebase가 커밋 히스토리가 깔끔하다.&lt;/li&gt;
&lt;li&gt;리모트 등 어딘가에 Push로 내보낸 커밋에 대해서는 절대 Rebaase 하지 말아야 한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>